<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Redanula's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2017-07-30T16:14:31.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Redanula]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[iOS Tips--NSDictionarySArray 快捷计算函数]]></title>
    <link href="http://yoursite.com/2017/07/30/iOS-Tips-NSDictionary-NSArray-%E5%BF%AB%E6%8D%B7%E8%AE%A1%E7%AE%97%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/07/30/iOS-Tips-NSDictionary-NSArray-快捷计算函数/</id>
    <published>2017-07-30T15:15:46.000Z</published>
    <updated>2017-07-30T16:14:31.000Z</updated>
    <content type="html"><![CDATA[<p>NSArray 有快捷的汇总公式，只要用 @函数.键路径 即可：</p>
<pre><code><span class="title">NSArray</span> *array = [NSArray arrayWithObjects:@<span class="string">"1.0"</span>,@<span class="string">"2.0"</span>,nil];
<span class="title">CGFloat</span> sum = [[array valueForKeyPath:@<span class="string">"<span class="variable">@sum</span>.floatValue"</span>] floatValue];
<span class="title">CGFloat</span> avg = [[array valueForKeyPath:@<span class="string">"<span class="variable">@avg</span>.floatValue"</span>] floatValue];
<span class="title">CGFloat</span> max =[[array valueForKeyPath:@<span class="string">"<span class="variable">@max</span>.floatValue"</span>] floatValue];
<span class="title">CGFloat</span> min =[[array valueForKeyPath:@<span class="string">"<span class="variable">@min</span>.floatValue"</span>] floatValue];
</code></pre><p>如果汇总值是在NSDictionary里面，同样可以取值进行汇总：</p>
<pre><code><span class="name">NSArray</span> *<span class="atom">dic</span> = [{@<span class="string">"KeyName1"</span>:@<span class="string">"1.0"</span>,@<span class="string">"KeyName2"</span>:@<span class="string">"abc"</span>},{@<span class="string">"KeyName1"</span>:@<span class="string">"2.0"</span>,@<span class="string">"KeyName2"</span>:@<span class="string">"bcd"</span>}]; 
<span class="name">CGFloat</span> <span class="atom">sum</span> = [[[<span class="atom">dic</span> <span class="atom">valueForKeyPath</span>:@<span class="string">"KeyName1"</span>] <span class="atom">valueForKeyPath</span>:@<span class="string">"@sum.floatValue"</span>] <span class="atom">floatValue</span>];
<span class="name">CGFloat</span> <span class="atom">max</span> = [[[<span class="atom">dic</span> <span class="atom">valueForKeyPath</span>:@<span class="string">"KeyName1"</span>] <span class="atom">valueForKeyPath</span>:@<span class="string">"@max.floatValue"</span>] <span class="atom">floatValue</span>];
</code></pre><p>以上快捷汇总实际是KVC的用法，更多KVC的用法参考<br>1.<a href="http://www.jianshu.com/p/b7dda8d49dc4" target="_blank" rel="external">http://www.jianshu.com/p/b7dda8d49dc4</a><br>2.<a href="https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/KeyValueCoding.html" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/KeyValueCoding.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>NSArray 有快捷的汇总公式，只要用 @函数.键路径 即可：</p>
<pre><code><span class="title">NSArray</span> *array = [NSArray arrayWithObjects:@<span class="strin]]>
    </summary>
    
      <category term="KVC" scheme="http://yoursite.com/tags/KVC/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python链家爬虫]]></title>
    <link href="http://yoursite.com/2017/03/21/Python%E9%93%BE%E5%AE%B6%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2017/03/21/Python链家爬虫/</id>
    <published>2017-03-21T02:23:17.000Z</published>
    <updated>2017-03-21T03:37:55.000Z</updated>
    <content type="html"><![CDATA[<p>业余时间做了个链家的爬虫，爬取数据写入sqlite，方便浏览和对比。<br>具体参考了冰蓝大牛的博客<a href="http://lanbing510.info/2016/03/15/Lianjia-Spider.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://lanbing510.info/2016/03/15/Lianjia-Spider.html?utm_source=tuicool&amp;utm_medium=referral</a>, 根据链家最新的web样式做了修改（2017-03）爬在售的二手房的数据。</p>
<p>链家对短时间内同一个IP的流量有监控，所以如果用多线程去爬，太快可能会被要求输入验证码。试了以下用代理ip池去爬，因为可用的免费代理ip不多也不稳定，就放弃了。后面想数据爬的也不多，就加个延时模拟人为慢慢爬了，另外还有个问题可能是单位时间内Request太快可能解析不到数据，就把延时放在BeautifulSoup解析后面，并加了如果没有数据则重复5次请求的验证过程，才成功抓全数据：</p>
<pre><code><span class="tag">time</span>.<span class="function"><span class="title">sleep</span><span class="params">(np.random.rand()</span></span>*<span class="number">3</span>+<span class="number">3</span>)
</code></pre><p>这里贴出关键的匹配代码，代码好粗糙，仅供发参考：）</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">onsell_spider</span><span class="params">(mydb,url_page=<span class="string">u"http://gz.lianjia.com/ershoufang/pg1rs越秀/"</span>,area=<span class="string">u"越秀"</span>)</span>:</span>
    <span class="comment"># time.sleep(np.random.rand()*1)</span>
    <span class="keyword">print</span> url_page
    counts = <span class="number">0</span>
    trytime = <span class="number">0</span>
    <span class="keyword">while</span> counts==<span class="number">0</span> &amp; trytime&lt;=<span class="number">5</span>:
        <span class="keyword">try</span>:
            req = urllib2.Request(url_page,headers=hds[random.randint(<span class="number">0</span>,len(hds)-<span class="number">1</span>)])
            source_code = urllib2.urlopen(req,timeout=<span class="number">10</span>).read()
            plain_text=unicode(source_code)<span class="comment">#,errors='ignore')   </span>
            soup = BeautifulSoup(plain_text, <span class="string">"lxml"</span>)
        <span class="keyword">except</span> (urllib2.HTTPError, urllib2.URLError), e:
            <span class="keyword">print</span> e
            exception_write(<span class="string">'onsell_spider'</span>,url_page)
            <span class="keyword">return</span>
        <span class="keyword">except</span> Exception,e:
            <span class="keyword">print</span> e
            exception_write(<span class="string">'onsell_spider'</span>,url_page)
            <span class="keyword">return</span>
        time.sleep(np.random.rand()*<span class="number">3</span>+<span class="number">3</span>)
        cj_list=soup.findAll(<span class="string">'div'</span>,{<span class="string">'class'</span>:<span class="string">'info clear'</span>})

        <span class="keyword">print</span> len(cj_list)
        counts = len(cj_list)
        trytime = trytime + <span class="number">1</span>
        <span class="keyword">for</span> cj <span class="keyword">in</span> cj_list:
            info_dict={}
            href=cj.find(<span class="string">'a'</span>)
            <span class="keyword">if</span> <span class="keyword">not</span> href:
                <span class="keyword">continue</span>
            info_dict.update({<span class="string">u'链接'</span>:href.attrs[<span class="string">'href'</span>]})
            name=cj.find(<span class="string">'a'</span>).text
            info_dict.update({<span class="string">u'标题'</span>:name})

     <span class="comment">#href TEXT primary key UNIQUE, name TEXT, community TEXT, style TEXT, area TEXT, orientation TEXT,decoration TEXT,haslift TEXT,floor TEXT, year TEXT, bplace TEXT,splace TEXT, unit_price TEXT, total_price TEXT, subway TEXT, other TEXT</span>

            content=unicode(cj.find(<span class="string">'div'</span>,{<span class="string">'class'</span>:<span class="string">'houseInfo'</span>}).renderContents().strip())
            info=re.match(<span class="string">r"&lt;span .*&gt;&lt;/span&gt;&lt;a .*&gt;(.*)&lt;/a&gt;(.*)"</span>, content)

            <span class="comment"># print info</span>
            <span class="keyword">if</span> info:
                info=info.groups()
                info_dict.update({<span class="string">u'小区'</span>:info[<span class="number">0</span>]})

                str = info[<span class="number">1</span>].strip().split(<span class="string">'|'</span>)
                <span class="comment"># print str[1]</span>

                <span class="keyword">try</span>:
                    info_dict.update({<span class="string">u'户型'</span>:str[<span class="number">1</span>].strip()})
                <span class="keyword">except</span> Exception,e:
                    info_dict.update({<span class="string">u'户型'</span>:<span class="string">''</span>})
                <span class="keyword">try</span>:
                    info_dict.update({<span class="string">u'面积'</span>:str[<span class="number">2</span>].strip()})
                <span class="keyword">except</span> Exception,e:
                    info_dict.update({<span class="string">u'面积'</span>:<span class="string">''</span>})
                <span class="keyword">try</span>:
                    info_dict.update({<span class="string">u'朝向'</span>:str[<span class="number">3</span>].strip()})
                <span class="keyword">except</span> Exception,e:
                    info_dict.update({<span class="string">u'朝向'</span>:<span class="string">''</span>})
                <span class="keyword">try</span>:
                    info_dict.update({<span class="string">u'装修'</span>:str[<span class="number">4</span>].strip()})
                <span class="keyword">except</span> Exception,e:
                    info_dict.update({<span class="string">u'装修'</span>:<span class="string">''</span>})
                <span class="keyword">try</span>:
                    info_dict.update({<span class="string">u'有无电梯'</span>:str[<span class="number">5</span>].strip()})
                <span class="keyword">except</span> Exception,e:
                    info_dict.update({<span class="string">u'有无电梯'</span>:<span class="string">''</span>})

            content=unicode(cj.find(<span class="string">'div'</span>,{<span class="string">'class'</span>:<span class="string">'positionInfo'</span>}).renderContents().strip())
            info=re.match(<span class="string">r"&lt;span .*&gt;&lt;/span&gt;(.*)\)(.*)&lt;a .*&gt;(.*)&lt;/a&gt;"</span>, content)
            <span class="keyword">if</span> info:
                info=info.groups()
                <span class="comment"># print info</span>
                info_dict.update({<span class="string">u'楼层'</span>:info[<span class="number">0</span>]})
                info_dict.update({<span class="string">u'建造时间'</span>:info[<span class="number">1</span>]})
                info_dict.update({<span class="string">u'大区域'</span>:area})
                <span class="keyword">try</span>:
                    info_dict.update({<span class="string">u'小区域'</span>:info[<span class="number">2</span>]})
                <span class="keyword">except</span> Exception,e:
                    info_dict.update({<span class="string">u'小区域'</span>:info[<span class="number">2</span>]})


            content=cj.find(<span class="string">'div'</span>,{<span class="string">'class'</span>:<span class="string">'unitPrice'</span>}).find(<span class="string">'span'</span>).text
            <span class="keyword">if</span> content:
                info_dict.update({<span class="string">u'单价'</span>:content})
            content=cj.find(<span class="string">'div'</span>,{<span class="string">'class'</span>:<span class="string">'totalPrice'</span>}).find(<span class="string">'span'</span>).text
            <span class="keyword">if</span> content:
                info_dict.update({<span class="string">u'总价'</span>:content})

            content=cj.find(<span class="string">'span'</span>,{<span class="string">'class'</span>:<span class="string">'subway'</span>})
            <span class="comment"># print content</span>
            <span class="keyword">if</span> content:
                <span class="keyword">try</span>:
                    info_dict.update({<span class="string">u'地铁'</span>:content.text})
                <span class="keyword">except</span> Exception,e:
                    info_dict.update({<span class="string">u'地铁'</span>:<span class="string">''</span>})

            content=cj.find(<span class="string">'div'</span>,{<span class="string">'class'</span>:<span class="string">'followInfo'</span>}).text
            <span class="keyword">if</span>  content:
                info_dict.update({<span class="string">u'其他'</span>:content})

            command=sql_onsell_insert_command(info_dict)
            mydb.execute(command,<span class="number">1</span>)


<span class="function"><span class="keyword">def</span> <span class="title">do_onsell_spider</span><span class="params">(mydb,area=<span class="string">u"越秀"</span>)</span>:</span>

    url=<span class="string">u"http://gz.lianjia.com/ershoufang/pg%drs%s/"</span> % (<span class="number">1</span>,area)

    <span class="keyword">try</span>:
        req = urllib2.Request(url,headers=hds[random.randint(<span class="number">0</span>,len(hds)-<span class="number">1</span>)])
        source_code = urllib2.urlopen(req,timeout=<span class="number">10</span>).read()
        plain_text=unicode(source_code)<span class="comment">#,errors='ignore')   </span>
        soup = BeautifulSoup(plain_text, <span class="string">"lxml"</span>)
    <span class="keyword">except</span> (urllib2.HTTPError, urllib2.URLError), e:
        <span class="keyword">print</span> e
        exception_write(<span class="string">'do_onsell_spider'</span>,area)
        <span class="keyword">return</span>
    <span class="keyword">except</span> Exception,e:
        <span class="keyword">print</span> e
        exception_write(<span class="string">'do_onsell_spider'</span>,area)
        <span class="keyword">return</span>

    time.sleep(np.random.rand()*<span class="number">1</span>+<span class="number">1</span>)
    content=soup.find(<span class="string">'div'</span>,{<span class="string">'class'</span>:<span class="string">'page-box house-lst-page-box'</span>})
    <span class="comment"># print soup</span>

    <span class="keyword">if</span> content:
        d=<span class="string">"d="</span>+content.get(<span class="string">'page-data'</span>)
        exec(d)
        total_pages=d[<span class="string">'totalPage'</span>]

    <span class="keyword">print</span> total_pages

    <span class="keyword">for</span> i <span class="keyword">in</span> range(total_pages):
        time.sleep(np.random.rand()*<span class="number">1</span>)
        url_page=<span class="string">u"http://gz.lianjia.com/ershoufang/pg%drs%s/"</span> % (i+<span class="number">1</span>,area)
        onsell_spider(mydb,url_page,area)
</code></pre><p>对BeautifulSoup的方法还不太熟悉，用的都是简单粗暴的方法，后续再去细看了。</p>
<p>爬下来的数据：<br>    <img src="/2017/03/21/Python链家爬虫/imgdata.png" alt="imgdata"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>业余时间做了个链家的爬虫，爬取数据写入sqlite，方便浏览和对比。<br>具体参考了冰蓝大牛的博客<a href="http://lanbing510.info/2016/03/15/Lianjia-Spider.html?utm_source=tuicool&amp;u]]>
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Python爬虫" scheme="http://yoursite.com/tags/Python%E7%88%AC%E8%99%AB/"/>
    
      <category term="链家" scheme="http://yoursite.com/tags/%E9%93%BE%E5%AE%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python高德爬虫]]></title>
    <link href="http://yoursite.com/2017/03/13/Python%E9%AB%98%E5%BE%B7%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2017/03/13/Python高德爬虫/</id>
    <published>2017-03-13T06:29:59.000Z</published>
    <updated>2017-03-21T07:50:46.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间因公司需求，需要爬取高德地图的数据，就学习了下Python，并做了个简易的爬虫GUI。</p>
<p>因为高德有api，所以爬数据灰常简单。<br>整个流程：输入城市编码-》根据api爬取数据-》导出到Excel<br>使用的库：BeautifulSoup PyQt5 openpyxl urllib2 requests等</p>
<p>具体思路：</p>
<h3 id="高德申请api的key，配置好需要爬取的参数：">高德申请api的key，配置好需要爬取的参数：</h3><p>参数城市、POI分类、查询关键词等,如果不hardcode的部分可以从界面传入</p>
<pre><code>url = <span class="string">r'http://restapi.amap.com/v3/place/text?&amp;citylimit=true&amp;&amp;output=xml&amp;offset=25&amp;page=1&amp;key=[your key]&amp;extensions=base'</span>
wherestr = <span class="string">r'&amp;city=440106&amp;types=050301&amp;keywords=肯德基'</span>
</code></pre><h3 id="关键抓取代码：">关键抓取代码：</h3><pre><code><span class="function"><span class="keyword">def</span> <span class="title">store_spider</span><span class="params">(self, citystr, storetype, wherestr)</span>:</span>
    page_num=<span class="number">1</span>;
    store_list=[]
    try_times=<span class="number">0</span>

    url = <span class="string">r'http://restapi.amap.com/v3/place/text?&amp;citylimit=true&amp;&amp;output=xml&amp;offset=25&amp;page=1&amp;key=[your key]&amp;extensions=base'</span>
    url = url + wherestr
    total_record = <span class="number">1</span>

    <span class="keyword">while</span>(total_record&gt;<span class="number">0</span>):
        url=url.replace(<span class="string">'page='</span>+str(page_num-<span class="number">1</span>),<span class="string">'page='</span>+str(page_num))

        <span class="comment"># time.sleep(np.random.rand()*1)</span>

        <span class="keyword">try</span>:
            req = urllib2.Request(url, headers=hds[page_num%len(hds)])
            source_code = urllib2.urlopen(req).read()
            plain_text=str(source_code)   
        <span class="keyword">except</span> (urllib2.HTTPError, urllib2.URLError), e:
            <span class="keyword">print</span> e
            try_times+=<span class="number">1</span>;
            <span class="keyword">print</span> try_times
            <span class="keyword">if</span> try_times&gt;<span class="number">10</span>:
                date = QDateTime.currentDateTime(); 
                self.bigEditor.setPlainText(<span class="string">"网络连接异常，抓取【"</span>+ citystr + <span class="string">"】"</span>+ storetype +<span class="string">"结束。"</span> + date.toString(<span class="string">" 时间:yyyy/MM/dd HH:mm:ss"</span>) + <span class="string">"\n"</span> + self.bigEditor.toPlainText())
                <span class="keyword">break</span>
            <span class="keyword">else</span>:
                <span class="keyword">continue</span>

        soup = BeautifulSoup(plain_text, <span class="string">"lxml"</span>)
        list_soup = soup.find(<span class="string">'pois'</span>, {<span class="string">'type'</span>: <span class="string">'list'</span>})

        <span class="comment"># try_times+=1;</span>
        <span class="keyword">if</span> list_soup==<span class="keyword">None</span> <span class="keyword">and</span> try_times&lt;<span class="number">10</span>:
            <span class="keyword">continue</span>
        <span class="keyword">elif</span> list_soup==<span class="keyword">None</span> <span class="keyword">or</span> len(list_soup)&lt;=<span class="number">1</span>:
            <span class="keyword">break</span> 

        total_record_str = soup.find(<span class="string">'count'</span>).string.strip()
        total_record = string.atoi(str(total_record_str))

        <span class="keyword">if</span> total_record == <span class="number">0</span> : <span class="keyword">break</span>

        <span class="keyword">for</span> storeinfo <span class="keyword">in</span> list_soup.findAll(<span class="string">'poi'</span>):
            name  = storeinfo.find(<span class="string">'name'</span>).string.strip()
            location  = storeinfo.find(<span class="string">'location'</span>).string.strip()
            location_list = location.split(<span class="string">','</span>)

            <span class="keyword">try</span>:
                location_logtitudes = location_list[<span class="number">0</span>]
            <span class="keyword">except</span>:
                location_logtitudes = <span class="string">'未知'</span>

            <span class="keyword">try</span>:
                location_autitudes = location_list[<span class="number">1</span>]
            <span class="keyword">except</span>:
                location_autitudes = <span class="string">'未知'</span>

            <span class="keyword">try</span>:
                tel  = storeinfo.find(<span class="string">'tel'</span>).string.strip()
            <span class="keyword">except</span>:
                tel  = <span class="string">''</span>

            <span class="keyword">try</span>:
                adname  = storeinfo.find(<span class="string">'adname'</span>).string.strip()
            <span class="keyword">except</span>:
                adname  = <span class="string">''</span>

            <span class="keyword">try</span>:
                address  = storeinfo.find(<span class="string">'address'</span>).string.strip()
            <span class="keyword">except</span>:
                address  = <span class="string">''</span>

            typecode  = storeinfo.find(<span class="string">'typecode'</span>).string.strip()
            pname  = storeinfo.find(<span class="string">'pname'</span>).string.strip()
            cityname  = storeinfo.find(<span class="string">'cityname'</span>).string.strip()
            amaptype  = storeinfo.find(<span class="string">'type'</span>).string.strip()
            amapid  = storeinfo.find(<span class="string">'id'</span>).string.strip()
            store_list.append([name,pname,cityname,adname,address,location_logtitudes,location_autitudes,tel,storetype,amapid,typecode,amaptype])
        try_times=<span class="number">0</span> 

            <span class="comment"># print 'Page %d' % page_num</span>

        <span class="comment">#输出到GUI</span>
        date = QDateTime.currentDateTime(); 
        self.bigEditor.setPlainText(date.toString(<span class="string">"正在抓取【"</span>+ citystr + <span class="string">"】"</span>+ storetype +<span class="string">",页码: "</span> + str(page_num) + <span class="string">"  时间:yyyy/MM/dd HH:mm:ss"</span>) + <span class="string">"\n"</span> + self.bigEditor.toPlainText())
        app.processEvents()
        page_num+=<span class="number">1</span>
    <span class="keyword">return</span> store_list
</code></pre><h3 id="导出到excel：">导出到excel：</h3><pre><code><span class="comment">#保存到excel</span>
<span class="function"><span class="keyword">def</span> <span class="title">save_storelists_excel</span><span class="params">(self, storelists, citystr)</span>:</span>

    wb=Workbook()
    ws=[]

    <span class="comment"># for i in range(len(typelist)):</span>
    ws.append(wb.create_sheet(title=citystr.decode())) 
    <span class="comment"># for i in range(len(typelist)): </span>
    ws[<span class="number">0</span>].append([<span class="string">'序号'</span>,<span class="string">'商店名称'</span>,<span class="string">'省份'</span>,<span class="string">'城市'</span>,<span class="string">'区/县'</span>,<span class="string">'商店地址'</span>,<span class="string">'经度'</span>,<span class="string">'纬度'</span>,<span class="string">'联系电话'</span>,<span class="string">'商店类型'</span>,<span class="string">'高德ID'</span>,<span class="string">'高德类型ID'</span>,<span class="string">'高德类型'</span>])
    count=<span class="number">1</span>
    <span class="keyword">for</span> storelist <span class="keyword">in</span> storelists:
        <span class="keyword">for</span> st <span class="keyword">in</span> storelist:
            ws[<span class="number">0</span>].append([count,st[<span class="number">0</span>],st[<span class="number">1</span>],st[<span class="number">2</span>],st[<span class="number">3</span>],st[<span class="number">4</span>],st[<span class="number">5</span>],st[<span class="number">6</span>],st[<span class="number">7</span>],st[<span class="number">8</span>],st[<span class="number">9</span>],st[<span class="number">10</span>],st[<span class="number">11</span>]])
            count+=<span class="number">1</span>
    <span class="comment"># 保存excel       </span>
    save_path= <span class="string">'storelist'</span>
    save_path+=(<span class="string">'-'</span>+citystr.decode())
    save_path+=<span class="string">'.xlsx'</span>
    wb.remove_sheet(wb[<span class="string">'Sheet'</span>]); 
    <span class="comment"># save_path = os.path.join(os.path.abspath(os.curdir), save_path)</span>

    <span class="keyword">if</span> getattr(sys, <span class="string">'frozen'</span>, <span class="keyword">False</span>):
        application_path = os.path.dirname(sys.executable)
    <span class="keyword">elif</span> __file__:
        application_path = os.path.dirname(__file__)

    save_path = os.path.join(application_path, save_path)

    wb.save(save_path)

    date = QDateTime.currentDateTime(); 
    self.bigEditor.setPlainText(<span class="string">"导出到目录文件:【"</span> + save_path + date.toString(<span class="string">"】 时间:yyyy/MM/dd HH:mm:ss"</span>) + <span class="string">"\n"</span> + self.bigEditor.toPlainText())
    app.processEvents()
</code></pre><p>另外UI使用的是PyQt5，PyQt的UI从运行到打包一堆坑要踩，不过很多问题都可以搜到解决方案。UI部分做了个输入框，输入城市以后可以从本地sqlite查询对应该城市区域的全部编码，然后赋值到wherestr上，开始爬取数据并输出到QTextEdit。</p>
<p>总的来说，高德地图API对爬虫很友好，企业认证的调用次数上限都很高，只是貌似每次调用最多就只能返回1000条数据，如果说POI分类多，最好分别进行遍历抓取。这个爬虫都是用到很基础的库，后续有时间继续研究~</p>
<p>效果截图：<br>    <img src="/2017/03/13/Python高德爬虫/imgui.png" alt="imgui"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间因公司需求，需要爬取高德地图的数据，就学习了下Python，并做了个简易的爬虫GUI。</p>
<p>因为高德有api，所以爬数据灰常简单。<br>整个流程：输入城市编码-》根据api爬取数据-》导出到Excel<br>使用的库：BeautifulSoup PyQt]]>
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Python爬虫" scheme="http://yoursite.com/tags/Python%E7%88%AC%E8%99%AB/"/>
    
      <category term="高德地图API" scheme="http://yoursite.com/tags/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEAPI/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS VPN开发]]></title>
    <link href="http://yoursite.com/2017/03/01/iOS%20VPN%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2017/03/01/iOS VPN开发/</id>
    <published>2017-03-01T03:27:43.000Z</published>
    <updated>2017-03-23T03:46:35.000Z</updated>
    <content type="html"><![CDATA[<p>#####参考链接：<br>1.iOS 9 Network Extension VPN API编程指南<a href="http://www.helusi.com/ios9-network-extension-vpn-api/" target="_blank" rel="external">http://www.helusi.com/ios9-network-extension-vpn-api/</a><br>2.分享开发 iOS 和 Mac 全新 VPN 的艰难历程<a href="https://www.v2ex.com/t/264480" target="_blank" rel="external">https://www.v2ex.com/t/264480</a><br>3.Potatso原理解析<a href="https://www.kidneyband.com/?p=174" target="_blank" rel="external">https://www.kidneyband.com/?p=174</a></p>
<p>#####苹果开发者文档：<br>NEPacketTunnelProvider<a href="https://developer.apple.com/reference/networkextension/nepackettunnelprovider?language=objc" target="_blank" rel="external">https://developer.apple.com/reference/networkextension/nepackettunnelprovider?language=objc</a><br>SimpleTunnel<a href="https://developer.apple.com/library/prerelease/content/samplecode/SimpleTunnel/Introduction/Intro.html" target="_blank" rel="external">https://developer.apple.com/library/prerelease/content/samplecode/SimpleTunnel/Introduction/Intro.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>#####参考链接：<br>1.iOS 9 Network Extension VPN API编程指南<a href="http://www.helusi.com/ios9-network-extension-vpn-api/" target="_blank" rel="e]]>
    </summary>
    
      <category term="NEPacketTunnelProvider" scheme="http://yoursite.com/tags/NEPacketTunnelProvider/"/>
    
      <category term="Network Extension" scheme="http://yoursite.com/tags/Network-Extension/"/>
    
      <category term="iOS VPN" scheme="http://yoursite.com/tags/iOS-VPN/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UITableView-and-UIActivityIndicatorView 同页面的设置]]></title>
    <link href="http://yoursite.com/2015/11/26/UITableView-and-UIActivityIndicatorView/"/>
    <id>http://yoursite.com/2015/11/26/UITableView-and-UIActivityIndicatorView/</id>
    <published>2015-11-25T16:01:59.000Z</published>
    <updated>2017-03-20T06:39:06.000Z</updated>
    <content type="html"><![CDATA[<hr>
<p>storyboard 中 UIActivityIndicatorView 要放在tabelview下方<br>tableview y设置为0 重设约束才能保证tableview的顶部不会空白。</p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>storyboard 中 UIActivityIndicatorView 要放在tabelview下方<br>tableview y设置为0 重设约束才能保证tableview的顶部不会空白。</p>
]]>
    </summary>
    
      <category term="UITableView" scheme="http://yoursite.com/tags/UITableView/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NSDictionary NSMutableDictionary]]></title>
    <link href="http://yoursite.com/2015/08/18/NSDictionary-NSMutableDictionary/"/>
    <id>http://yoursite.com/2015/08/18/NSDictionary-NSMutableDictionary/</id>
    <published>2015-08-18T13:35:24.000Z</published>
    <updated>2016-02-19T02:39:37.000Z</updated>
    <content type="html"><![CDATA[<p>转自：<a href="http://seven-sally.lofter.com/post/19d861_5404fa" target="_blank" rel="external">http://seven-sally.lofter.com/post/19d861_5404fa</a></p>
<h2 id="不可变词典NSDictionary">不可变词典NSDictionary</h2><h3 id="字典初始化">字典初始化</h3><p>NSNumber *numObj = [NSNumber numberWithInt:100];</p>
<h3 id="以一个元素初始化">以一个元素初始化</h3><p>NSDictionary *dic = [NSDictionary dictionaryWithObject:numObj forKey:@”key”];</p>
<h3 id="初始化两个元素">初始化两个元素</h3><p>NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:numObj, @”valueKey”, numObj2, @”value2”,nil];</p>
<h3 id="初始化新字典，新字典包含otherDic">初始化新字典，新字典包含otherDic</h3><p>NSDictionary *dic = [NSDictionary dictionaryWithDictionary:otherDic];</p>
<h3 id="以文件内容初始化字典">以文件内容初始化字典</h3><p>NSDictionary *dic = [NSDictionary dictionaryWithContentsOfFile:path];</p>
<h3 id="常用方法">常用方法</h3><h3 id="获取字典数量">获取字典数量</h3><p>NSInteger count = [dic count];</p>
<h3 id="通过key获取对应的value对象">通过key获取对应的value对象</h3><p>NSObject *valueObj = [dic objectForKey:@”key”];</p>
<h3 id="将字典的key转成枚举对象，用于遍历">将字典的key转成枚举对象，用于遍历</h3><p>NSEnumerator *enumerator = [dic keyEnumerator];</p>
<h3 id="获取所有键的集合">获取所有键的集合</h3><p>NSArray *keys = [dic allKeys];</p>
<h3 id="获取所有值的集合">获取所有值的集合</h3><p>NSArray *values = [dic allValues];</p>
<p><br></p>
<h2 id="可变数组NSMutableDictionary">可变数组NSMutableDictionary</h2><h3 id="初始化一个空的可变字典">初始化一个空的可变字典</h3><p>NSMutableDictionary *dic2 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@”v1”,@”key1”,@”v2”,@”key2”,nil];</p>
<p>NSDictionary *dic3 = [NSDictionary dictionaryWithObject:@”v3” forKey:@”key3”];</p>
<h3 id="向字典2对象中添加整个字典对象3">向字典2对象中添加整个字典对象3</h3><p>[dic2 addEntriesFromDictionary:dic3];</p>
<h3 id="向字典2对象中最佳一个新的key3和value3">向字典2对象中最佳一个新的key3和value3</h3><p>[dic2 setValue:@”value3” forKey:@”key3”];</p>
<h3 id="初始化一个空的可变字典-1">初始化一个空的可变字典</h3><p>NSMutableDictionary *dic1 = [NSMutableDictionary dictionary];</p>
<h3 id="将空字典1对象内容设置与字典2对象相同">将空字典1对象内容设置与字典2对象相同</h3><p>[dic1 setDictionary:dic2];</p>
<h3 id="将字典中key1对应的值删除">将字典中key1对应的值删除</h3><p>[dic1 removeObjectForKey@”key1”];</p>
<p>NSArray *array = [NSArray arrayWithObjects:@”key1”, nil];</p>
<h3 id="根据指定的数组（key）移除字典1的内容">根据指定的数组（key）移除字典1的内容</h3><p>[dic2 removeObjectsForKeys:array];</p>
<h3 id="移除字典所有对象">移除字典所有对象</h3><p>[dic1 removeAllObjects];</p>
<h3 id="遍历字典">遍历字典</h3><h3 id="快速枚举">快速枚举</h3><p>for (id key in dic){</p>
<p>id obj = [dic objectForKey:key];</p>
<p>NSLog(@”%@”, obj);</p>
<p>}</p>
<h3 id="一般枚举">一般枚举</h3><p>NSArray *keys = [dic allKeys];</p>
<p>inr length = [keys count];</p>
<p>for (int i = 0; i &lt; length；i++){</p>
<p>id key = [keys objectAtIndex:i];</p>
<p>id obj = [dic objectForKey:key];</p>
<p>NSLog(@”%@”, obj);</p>
<p>}</p>
<h3 id="通过枚举类型枚举">通过枚举类型枚举</h3><p>NSEnumerator *enumerator = [dic keyEnumerator];</p>
<p>id key = [enumerator nextObject];</p>
<p>while (key) {</p>
<p>id obj = [dic objectForKey:key];</p>
<p>NSLog(@”%@”, obj);</p>
<p>key = [enumerator nextObject];</p>
<p>}</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转自：<a href="http://seven-sally.lofter.com/post/19d861_5404fa" target="_blank" rel="external">http://seven-sally.lofter.com/post/19d861_54]]>
    </summary>
    
      <category term="NSDictionary" scheme="http://yoursite.com/tags/NSDictionary/"/>
    
      <category term="NSMutableDictionary" scheme="http://yoursite.com/tags/NSMutableDictionary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown语法备忘]]></title>
    <link href="http://yoursite.com/2015/08/17/markdown-mark/"/>
    <id>http://yoursite.com/2015/08/17/markdown-mark/</id>
    <published>2015-08-16T16:01:59.000Z</published>
    <updated>2015-12-23T08:09:11.000Z</updated>
    <content type="html"><![CDATA[<p>参考<a href="http://ibruce.info/2013/11/26/markdown/" title="不如的博客" target="_blank" rel="external">markdown简明语法</a></p>
<hr>
<ol>
<li>强调用*或_</li>
<li>多级标题用n个#号</li>
<li>大标题、小标题用3个或以上===、—</li>
<li>引用&lt;、&lt;&lt;</li>
<li>行内代码&lt;!–￼0–&gt;</li>
<li>段落代码每行前加1个tab</li>
<li>无序列表用+或-号</li>
<li>文字链接用[text](url,””)；超链接用<url>;图片链接用![text](url,””)</url></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考<a href="http://ibruce.info/2013/11/26/markdown/" title="不如的博客" target="_blank" rel="external">markdown简明语法</a></p>
<hr>
<ol>
<li>强调用*或]]>
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo搭建博客done]]></title>
    <link href="http://yoursite.com/2015/08/13/postname/"/>
    <id>http://yoursite.com/2015/08/13/postname/</id>
    <published>2015-08-12T16:08:31.000Z</published>
    <updated>2015-12-23T08:09:11.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/08/12/hello-world/"/>
    <id>http://yoursite.com/2015/08/12/hello-world/</id>
    <published>2015-08-12T15:52:24.000Z</published>
    <updated>2015-08-12T15:52:24.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
